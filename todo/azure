https://www.udemy.com/course/azure-devops-for-beginners
------------------------------------------------------------

azure.microsoft.com
dev.azure.com


https://portal.azure.com/#create/Microsoft.WebSite
https://appsraban.azurewebsites.net/
https://appsraban.scm.azurewebsites.net/DebugConsole
------------------------------------------------------------
1. Login to portal.azure.com
2. Take free trial a subscription and create one "App Service name" ex. appsraban --> appsraban.azurewebsites.net
3. login devops into dev.azure.com
4. create a src repo
5. commit and merge code to repo
7. run the pipeline
    - create a build from pipeline, drop/artifact[n].zip is generated for every pipelince successful
    - 
6. release every time after a pipeline is successful
   - deploy the artifact[n].zip to a new release version[n] 

------------------------------------------------------------
Youtube
1. without Arichieve https://www.youtube.com/watch?v=Ny5vJRfQito
2. Windows: https://www.youtube.com/watch?v=aMO-NQ1Xza0
3. Linux: https://www.youtube.com/watch?v=HLhlKIIfaZs
4. Release Variable:  https://www.youtube.com/watch?v=OFr6Vkw0mq8
5. https://www.youtube.com/watch?v=xH5EY7FCFQw

5. Jenkins
   - https://www.youtube.com/watch?v=xH5EY7FCFQw
   - https://www.youtube.com/watch?v=o3AOhXQ4Mnc
   - https://www.youtube.com/watch?v=t_z0IwdAgYs
   
Youtube Search
- build and release pipeline with jenkins sever azure devops



- basic steps in udemy have completed for build and release pipeline
- 
------------------------------------------------------------
CI-CD STEPS
1. azure devops repo setup
2. azure app service in portal from a license using subscription
3. Build pipeline -----CI
   --- need to enable continious integration "trigger" after every modification in master branch
   need to select a template which genearates a pipeline.yml file
   project-repo-path need to add
   project-repo-build-path need to add
   - npm install
   - npm build
   - archieve zip it to a drop folder --- which can be downloaded
   then run the build after template set up
   - view every step must pass

4. Create a release pipeline ----CD
   - select a release template yml
   - create one envirnemt [exp, test, development, prod]
   - Configure the app service domain which is subscribe before from portal  to the env
   - Link the build pipeline artifact(output.zip)  to the env
   - Enable the continious deployment option to artifact after every every artifact generated
   - 

5. For Linux Server
   - use nodejs servers
   - use node pm2 for manging advance servers
   - pm2 serve -s /home/site/wwwroot/ -no-daemon    #...... as a start up command
   - 
6. 
7. 
8. 
9. 

------------------------------------------------------------
https://docs.microsoft.com/en-us/azure/devops/report/dashboards/overview?view=azure-devops

- CheatSheets Azure sprint board
- 

- yestered pinged him Abhimnayu
- Asked more videos if he can collect for code checking and adding hooks after code push
- asked for a basic/normalized flow diagram for dashboard and sprint board 
- 
------------------------------------------------------------



-----------------------------------------------------------------------
Git Lab
- https://docs.gitlab.com/ee/ci/quick_start/#cicd-process-overview
- 

------------------------------------------------------------------------
1. Multiple App services - From azure portal like [Dev Link], [QA Link], [ Staging Link], [Production Link]
2. Multiple Repo
3. Multiple Pipleine
4. Multiple Releases
5. 


-------------------------------------------------------------------------
# Name for each artificat must change

Each Artificat
displayName: "Publish Artifact: drop"
ArtifactName: 'dropUAT'
ArtifactName: 'dropQA'
ArtifactName: 'dropProd'
--------------------------------------------------------------------------

1. Unit Test Report URL if the build is failed
2. E2E Report - Cypress
3. 

--------------------------------------------------------------------------
test, deploy and publish tasks.
build and release


-------------------------------------------------------------
==============================================================================================
1. Create a Build Pipeline For Every Branch
   [Master/Dev/UAT/QA]

2. Modify the artifact path for every branch in pipeline.yaml
   ex. ArtifactName: ['dropUAT', 'dropQA', 'dropProd', 'dropDev']

3. In release pipeline
     - Add all artificats from Build pipeline
     - Create all the envirnments [dev,QA,UAT,PROD]
     - To every envirment assign the respective/relate artifact:latest
     - Link every release env to a [Web serice host - Deploy App slot]

4. Deploy every envirnment from release pipeline on approval or automatic on code merge
==============================================================================================


-------------------------------------------------------------
Q. How to add static code analysis tools like SonarQube in the build pipeline
Q. How Pipeline Build is Validated of Pull Requests.
Q. How to increase the Build pipeline performance since it takes time
Q. How a service hooks interact with other CI/CD tool like Jenkin to azure repo
------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------
https://www.dotnetcurry.com/devops/1539/azure-pipelines
- An ordered set of actions to be executed
- The source of the code - git, tfvc
- Agent to be used to run this build
- The artifact (sharable output) that will be created
- Variables to be used
- The solution from where the NuGet configuration will be available
- Variables to be used
- Automated Triggers – These triggers include
   - Continuous Integration (CI) – Every time code repository is updated by way of git push or check-in; this build is triggered
   - Scheduled
   - Gated Check-in(TFVC)
   - Pull Request Related(GIT)
- Options like – whether to create a work item if build fails.
- Retention policy to define how long the build output will be retained 
- 
- Agent is a software on an identified computer that can run the workflow of build pipeline
   - 1. Hosted Agents – Provided by Microsoft for use only during the run of the pipeline
        VMs or containers hosted by Microsoft in Azure
   - 2. On-Premises Agents (Default) – These are the agents 
            that are installed on our computers in our own network - like JetBrain Resharper or SonarQube as part of the build workflow
   - 3. 
- 
- Source
- Activity / Step / Task
- like get source, compile, unit test, copy files, run code analysis, create artifact etc
- tasks created by third-party software vendors like SonarCloud (In cloud SaaS version of SonarQube), Whitesource, Jenkins, Terraforms etc. are available from Visual Studio Marketplace
- 
- 
- 
- Pipeline (Release)
- Artifact(s) to be deployed with their version
- Release trigger – This may be manual or automated (Continuous Deployment) trigger.
- Deployment triggers for each stage – Each stage may have a manual or automated trigger.
- Pre-deployment approvers list for each stage – This ensures that after the deployment is triggered, actual deployment starts only after an approval from a defined competent authority is given.
- Post-deployment approvers list for each stage – This is to ensure that quality of built artifact is satisfactory and it can be deployed to next stage.
- Release level variables and stage level variables with their values – Variables allow us to reuse some values in different stages. For example, while doing deployment to a VM, we may need Admin User Name and Admin Password to be used by the task. 
- Automated gates for approvals – a mechanism to automate the check and approval as part of the post-deployment scenario. Such gates can be:

------------------------------------------------------------

   async function asyncc() {
      return await function() {
         var y="notdone";
         setTimeout(function () {
               y="done";
          }, 1000);
          return y;
      }();
   }

   asyncc().then(function( out ) {
      console.log(out);
   });


------------------------------------------------------------

function x () {
   return new Promise((resolve, reject) => {
      setTimeout(function () {
           resolve('done');
       }, 1000);
   });
}

x().then(function(out) {
   console.log(out);
});

------------------------------------------------------------
## Sonarcube + Sonarscanner
1. Download sonarcube - community edittion - unzip it
2. Download sonar scanner for windows - extract it
3. change the port number in /conf for both the folder
4. run localhost:9000
5. change the password from admin
6. generate a token
7. 

http://localhost:3000/

react: 108b370cc33f888027b440fca4821fd3c115dc45

# run the below command in project directory --- sonar.sources=project_path
sonar-scanner.bat -D"sonar.projectKey=localhost_3000" -D"sonar.sources=." -D"sonar.host.url=http://localhost:9000" -D"sonar.login=108b370cc33f888027b440fca4821fd3c115dc45"


------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



------------------------------------------------------------



