ref

-----------------------------
react
react native
electron
next


-----------------------------
useState()
useEffect()
useRef()
useMutation()
useMemo()
useCallback()
use

-----------------------------
Q. How to dynamically create a component and its propertires (props, states, html)
Q. How to create a directive and use it in html-jsx
Q. How to watch a props varilable in react like "ngOnChanges"
Q. How content projection works in react like angular
Q. <ng-container *ng-templateoutlet/> works like a placeholder to load the content
Q. mounting, updating, unmounting in Functional component?
Q. any event bus concept like to pass the data from one to other like in ng (@Hostlistner() receives the cusom events)
Q. 


-----------------------------

constructor() âˆ’ 
getDerivedStateFromProps(props, state) -- ngOnChanges()
getSnapshotBeforeUpdate() --
render() --> ngAfterViewInit()
componentDidMount() --  ngOnInit()
componentDidUpdate(prevProps, prevState, snapshot) -- ngOnChanges()
componentWillUnmount() --- ngONDestroy()

<tr *ngFor="let item of List"></tr> | this.state.items.map((item) => {})
-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------



-----------------------------


