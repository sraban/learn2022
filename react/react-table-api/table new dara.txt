import React, {useState, useEffect, useMemo} from "react";
import axios from 'axios'
import { useTable, useFilters, useGlobalFilter, useAsyncDebounce, useSortBy, usePagination } from 'react-table'
import 'bootstrap/dist/css/bootstrap.min.css';
import Modal from "react-bootstrap/Modal";
import Button from "react-bootstrap/Button";

// Define a default UI for filtering
function GlobalFilter({
    preGlobalFilteredRows,
    globalFilter,
    setGlobalFilter,
}) {
    const count = preGlobalFilteredRows.length
    const [value, setValue] = React.useState(globalFilter)
    const onChange = useAsyncDebounce(value => {
        setGlobalFilter(value || undefined)
    }, 200)

    return (
        <span style={{display:'flex', flexDirection:'row' }}>
            Search:{' '}
            <input
                className="form-control"
                value={value || ""}
                onChange={e => {
                    setValue(e.target.value);
                    onChange(e.target.value);
                }}
                placeholder={`${count} records...`}
            />
        </span>
    )
}


function Table({ columns, data }) {

    const {
        getTableProps,
        getTableBodyProps,
        headerGroups,
        rows,
        page,
        prepareRow,
        canPreviousPage,
        canNextPage,
        pageOptions,
        pageCount,
        gotoPage,
        nextPage,
        previousPage,
        setPageSize,
        state: { pageIndex, pageSize},
        state,
        preGlobalFilteredRows,
        setGlobalFilter,
    } = useTable(
        {
            columns,
            data,
            initialState: { pageIndex: 0, pageSize: 5 },
        },
        useFilters,
        useGlobalFilter,
        useSortBy,
        usePagination
    )

    return (
        <div>
            <div style={{display:'flex', flexDirection:'row', justifyContent:'space-between', alignItems:"center" }}>
                <div style={{display:'flex', flexDirection:'row' }}>
                    <div style={{display:'flex', flexDirection:'row' }}>
                        Show
                        <select
                        className="select-btn"
                        value={pageSize}
                        onChange={e => {
                            setPageSize(Number(e.target.value))
                        }}
                        style={{ width: '120px', height: '38px' }}
                        >
                        {[5, 10, 20, 30, 40, 50].map(pageSize => (
                            <option key={pageSize} value={pageSize}>
                                {pageSize}
                            </option>
                        ))}
                        </select>
                        entries
                    </div>
                    <div>
                      {/* <ExportToExcel apiData={data} fileName={fileName} /> */}
                    </div>
                </div>
                <div>
                    <GlobalFilter
                    preGlobalFilteredRows={preGlobalFilteredRows}
                    globalFilter={state.globalFilter}
                    setGlobalFilter={setGlobalFilter}
                    />
                </div>
            </div>
            <table className="table" {...getTableProps()}>
                <thead>
                    {headerGroups.map(headerGroup => (
                        <tr {...headerGroup.getHeaderGroupProps()}>
                            {headerGroup.headers.map(column => (
                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>
                                    {column.render('Header')}
                                    {/* Add a sort direction indicator */}
                                    <span>
                                        {column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''}
                                    </span>
                                </th>
                            ))}
                        </tr>
                    ))}
                </thead>
                <tbody {...getTableBodyProps()}>
                    {page.map((row, i) => {
                        prepareRow(row)
                        return (
                            <tr {...row.getRowProps()}>
                                {row.cells.map(cell => {
                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>
                                })}
                            </tr>
                        )
                    })}
                </tbody>
            </table>
            {/* 
                Pagination can be built however you'd like. 
                 This is just a very basic UI implementation:
            */}
            <div style={{display:'flex', flexDirection:'row', justifyContent:'space-between', alignItems:"center" }}>
                <div>
                    Showing {page.length} out of {rows.length} entries <span><a href="/">Click to load more</a></span>
                </div>
                <div>
                    <ul className="pagination">
                        <li className="page-item" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>
                            <a className="page-link">0</a>
                        </li>
                        <li className="page-item" onClick={() => previousPage()} disabled={!canPreviousPage}>
                            <a className="page-link">Prev</a>
                        </li>
                        <li className="page-item" onClick={() => nextPage()} disabled={!canNextPage}>
                            <a className="page-link">Next</a>
                        </li>
                        <li className="page-item" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>
                            <a className="page-link">Last</a>
                        </li>
                    </ul>
                </div>
            </div>
           
        </div>
    )
}

function FilterTableComponent() {

    const URL1 = `/pendingReq`;

    const columns = useMemo(() =>
        [
            {
                Header: 'Request ID',
                accessor: 'requested_id',
            },
            {
                Header: 'Requested By',
                accessor: 'requested_by'
            },
            {
                Header: 'Requested Date',
                accessor: 'requested_date'
            },
            {
                Header: 'Person To Merge',
                accessor: 'personto_merge'
            },
            {
                Header: 'State',
                accessor: 'state'
            },
            {
                Header: () => 'Action',
                id: 'actionBtn',
                Cell: ({ row }) => (
                    <button onClick={()=>removeDataHandler(row.values.requested_id)}>
                        X cancel
                    </button>
                ),
            }
        ],[]
    )

    const [data,setData] = useState([]);
    const [selected, setSelected] = useState(null);
    const [show, setShow] = useState(false);
    const [selectedID, setSelectedID] = useState();

    useEffect(()=>{
        getData();
    },[]);

    const getData = async () => {
        const response = await axios.get(URL1);
        setData(response.data);
    };

    const removeDataHandler = (cancelId) => {
        console.log(cancelId);
        setShow(true);
        setSelectedID(cancelId);
    };

    const handleClose = () => {
        setSelectedID("");
        setShow(false);
    };
    
    const handleConfirm = () => {
        //axios.delete(URL1,selectedID)
        let newData = data.filter((data) => selectedID !== data.requested_id);
        setData(newData);
        handleClose();
    };

    return (
        <div>
            <Table columns={columns} data={data} />
            {/* Model */}
            <Modal show={show} onHide={handleClose}>
                {/* <img
                data-testid="img"
                alt="img"
                style={{
                    width: "90px",
                    height: "70px",
                    marginLeft: "114px",
                    color:"green",
                    marginTop: "17px",
                }}
                src={QuestionCircle}
                /> */}
                <i icon="fa-light fa-circle-question" ></i>
                <h5
                data-testid="title22"
                style={{ marginLeft: "24px", color: "gray" }}
                >
                Are you sure you want to delete <br />
                this contact method?
                </h5>
                <Modal.Footer>
                <Button
                    data-testid="increment"
                    className="yes-btn"
                    variant="primary"
                    onClick={handleConfirm}
                >
                    Yes, I am Sure!
                </Button>
                <Button
                    data-testid="decrement"
                    className="can-btn"
                    variant="danger"
                    onClick={handleClose}
                >
                    Cancel
                </Button>
                </Modal.Footer>
            </Modal>
        </div>
        
    )
}

export default FilterTableComponent;