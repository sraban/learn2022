# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: replacetokens@3
  inputs:
    targetFiles: 'sonar-project.tsx'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: true

- script: |
    npm install
  displayName: 'npm install'

- task: Npm@1
  displayName: 'npm test'
  inputs:
    command: 'custom'
    workingDir: '$(Build.SourcesDirectory)'
    customCommand: 'run test'

- task: Npm@1
  displayName: 'Publish Quality Gate Result'
  inputs:
    command: 'custom'
    workingDir: '$(Build.SourcesDirectory)'
    customCommand: 'run sonar'

- task: PowerShell@2
  displayName: 'Break on Quality Gate Failure'
  inputs:
    targetType: 'inline'
    script: |
      $token = [System.Text.Encoding]::UTF8.GetBytes("$(sonarQubeToken)" + ":")
      $base64 = [System.Convert]::ToBase64String($token)

      Start-Sleep -s 10
      $basicAuth = [string]::Format("Basic {0}", $base64)
      $headers = @{ Authorization = $basicAuth }

      $result = Invoke-RestMethod -Method Get -Uri "$(sonarQubeServerUrl)api/project_branches/list?project=$(projectKey)" -Headers $headers
      $result | ConvertTo-Json | Write-Host

      $branch = $result.branches | Where-Object { $_.name -eq "$(branchName)" }

      if ($branch.status.qualityGateStatus -eq 'OK') {
      Write-Host "Quality Gate Succeeded"
      }else{
      throw "Quality gate failed"
      }

- script: npm run build
  workingDirectory: '$(Build.SourcesDirectory)'
  displayName: "npm build"
  env:
    CI: true

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/build'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.SourcesDirectory)/build.zip'
    replaceExistingArchive: true

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.SourcesDirectory)/build.zip'
    artifact: 'build'
    publishLocation: 'pipeline'