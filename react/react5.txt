https://www.gisgraphy.com/index.php
--------------------------------------------------------
https://reactdesktop.js.org/

## FlexBox
https://www.youtube.com/watch?v=tXIhdp5R7sc

Q. Presence of Mind: 
https://www.linkedin.com/pulse/presence-mind-testing-questions-answers-arun-b/

Q. deep:: class  in css component basis
Q. slot components  <comp1><comp2></comp1></comp1>
=========================================================


# Snippets React:
------------------------------------------------------------------------------------------
 {{
    courseGoals.length > 0 && (
          <CourseGoalList
            items={courseGoals}
            onDeleteItem={deleteItemHandler}
          />
        )
}}

------------------------------------------------------------------------------------------
    <button type={props.type} className="button" onClick={props.onClick}>
      {props.children} ------ This is the data within the slot...
    </button>
------------------------------------------------------------------------------------------
    event.preventDefault();
    props.onAddGoal(enteredValue);
    props.onAddExpense(expenseData);
------------------------------------------------------------------------------------------
{props.items.map(goal => (

))}
------------------------------------------------------------------------------------------
import styled from 'styled-components';

const FormControl = styled.div`

`;
<FormControl invalid={!isValid}>
</FormControl>
------------------------------------------------------------------------------------------
className={`form-control ${!isValid ? 'invalid' : ''}`}
------------------------------------------------------------------------------------------
border: 1px solid ${props => (props.invalid ? 'red' : '#ccc')};
------------------------------------------------------------------------------------------
setEnteredDate(event.target.value);
------------------------------------------------------------------------------------------
import React, { useState } from 'react';
------------------------------------------------------------------------------------------
  const [title, setTitle] = useState(props.title);
------------------------------------------------------------------------------------------
  let expensesContent = <p>No expenses found.</p>;

  if (filteredExpenses.length > 0) {
    expensesContent = filteredExpenses.map((expense) => (
      <ExpenseItem
        key={expense.id}
        title={expense.title}
        amount={expense.amount}
        date={expense.date}
      />
    ));
  }
------------------------------------------------------------------------------------------
const Card = (props) => {
  return <div className={`${classes.card} ${props.className}`}>{props.children}</div>;
};
------------------------------------------------------------------------------------------
 return [
        ...prevUsersList,
        { name: uName, age: uAge, id: Math.random().toString() },
      ];
------------------------------------------------------------------------------------------
setUsersList((prevUsersList) => {
  while setting value --- anything can be called before it
});
------------------------------------------------------------------------------------------
{error && (
        <ErrorModal
          title={error.title}
          message={error.message}
          onConfirm={errorHandler}
        />
      )}
------------------------------------------------------------------------------------------
Q. What is fragment - import { Fragment } from 'react';  
  <Fragment>
    <Header />
    <main>
      <Meals />
    </main>
    <MealsSummary />
    <AvailableMeals />
  </Fragment>
------------------------------------------------------------------------------------------
  const mealsList = DUMMY_MEALS.map((meal) => <li>{meal.name}</li>);

  const mealsList = DUMMY_MEALS.map((meal) => (
    <MealItem
      key={meal.id}
      name={meal.name}
      description={meal.description}
      price={meal.price}
    />
  ));

------------------------------------------------------------------------------------------
animation: meals-appear 1s ease-out forwards; -- css
@keyframes meals-appear {
  from {
    opacity: 0;
    transform: translateY(3rem);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}
------------------------------------------------------------------------------------------
import classes from './MealsSummary.module.css';
<section className={classes.summary}>
------------------------------------------------------------------------------------------
const price = `$${props.price.toFixed(2)}`;

------------------------------------------------------------------------------------------
   <div className={classes.input}>
      <label htmlFor={props.input.id}>{props.label}</label>
      <input {...props.input} />
    </div>
------------------------------------------------------------------------------------------
const cartItems = (
    <ul className={classes['cart-items']}>
      {
        [{ id: 'c1', name: 'Sushi', amount: 2, price: 12.99 }].map((item) => (
          <li>{item.name}</li>
        ))
      }
    </ul>
  );

{cartItems}
------------------------------------------------------------------------------------------
import ReactDOM, { Fragment, useState } from 'react';s

const portalElement = document.getElementById('overlays');
<Fragment>
      {ReactDOM.createPortal(<Backdrop onClose={props.onClose} />, portalElement)}
</Fragment>
------------------------------------------------------------------------------------------
<HeaderCartButton onClick={props.onShowCart} /> ---> componet click the event emitter in el
<button className={classes.button} onClick={props.onClick}/>
------------------------------------------------------------------------------------------
@Redux
  <CartProvider>
    <main>
      <Meals />
    </main>
  </CartProvider>

    <CartContext.Provider value={cartContext}>
      {props.children}
    </CartContext.Provider>

  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);
  dispatchCartAction({type: 'ADD', item: item});
  - uses a reducer accepts the defaultState, oneCallback
  - once callBack is called using the dispatcher, defaultState is modified, finally the modifed value is stored in context provider for further action.

------------------------------------------------------------------------------------------
REdux -Thung
https://github.com/JscramblerBlog/async-operations-react-redux
https://blog.jscrambler.com/asynchronous-operations-in-react-redux

 https://github.com/reactjs/react-redux
------------------------------------------------------------------------------------------
React.forwardRef()
  const amountInputRef = useRef();
------------------------------------------------------------------------------------------
import { useContext, useEffect, useState } from 'react';
------------------------------------------------------------------------------------------
The await expression causes async function execution to pause until a promise is settled (that is, fulfilled or rejected), and to resume execution of the async function after fulfillment
------------------------------------------------------------------------------------------
  useEffect(() => {
    fetchMoviesHandler();
  }, [fetchMoviesHandler]);

------------------------------------------------------------------------------------------
  import React, { useRef } from 'react';

  const titleRef = useRef('');
  const openingTextRef = useRef('');
  const releaseDateRef = useRef('');

  <input type='text' id='title' ref={titleRef} />
  <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>
  <input type='text' id='date' ref={releaseDateRef} />


   let title = titleRef.current.value,
   // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM
   // --- setEnteredName('');
   openingTextRef.current.value,
------------------------------------------------------------------------------------------
  const fetchMoviesHandler = useCallback(async () => {

    useEffect(() => {
      fetchMoviesHandler();
    }, [fetchMoviesHandler]);
------------------------------------------------------------------------------------------
<React.Fragment>
------------------------------------------------------------------------------------------
  const [inputState, dispatch] = useReducer(
    inputStateReducer,
    initialInputState
  );

------------------------------------------------------------------------------------------
@Logic - Accumulated state is stored in a Global object which does not change.

import { Provider } from 'react-redux';
import { createStore } from 'redux';

 --- store is the callback returns the accumulated state  from reducer
 store = createStore( accumulatedState );

<Provider store={store}>
  <App />
</Provider>




------------------------------------------------------------------------------------------
import { useDispatch, useSelector, useReducer } from 'react-redux';
  const dispatch = useDispatch();
  const counter = useSelector(state => state.counter);

------------------------------------------------------------------------------------------
Q. What is the use of Redux Toolkit
"@reduxjs/toolkit": "^1.5.0",

import { createSlice, configureStore } from '@reduxjs/toolkit';



------------------------------------------------------------------------------------------
  {!isAuth && <Auth />}
  {isAuth && <UserProfile />}
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
https://testing-library.com/docs/queries/about#queryoptions
https://github.com/testing-library/dom-testing-library/issues/700#issuecomment-692218886
https://testing-playground.com/
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
If I got a chance to prove me surely proof it. 
=======



------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

